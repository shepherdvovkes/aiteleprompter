/**
 * Demo Mode - —Å–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ AI –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ API –∫–ª—é—á–∞
 */
class DemoMode {
    constructor() {
        this.enabled = false;
        this.demoResponses = {
            '—á—Ç–æ —Ç–∞–∫–æ–µ rest api': 'REST API (Representational State Transfer) - —ç—Ç–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–±-—Å–µ—Ä–≤–∏—Å–æ–≤. –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:\n\n1. **Stateless** - –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ–∑–∞–≤–∏—Å–∏–º\n2. **HTTP –º–µ—Ç–æ–¥—ã** - GET, POST, PUT, DELETE\n3. **–†–µ—Å—É—Ä—Å—ã** - –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É—é—Ç—Å—è URL\n4. **JSON —Ñ–æ—Ä–º–∞—Ç** - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏\n\n–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n```javascript\nfetch("/api/users/123", {\n  method: "GET",\n  headers: {"Content-Type": "application/json"}\n})\n```',
            
            '–∫–∞–∫ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ redis': 'Redis –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ - —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —É—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\n\n## –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:\n\n1. **Cache-Aside**\n```javascript\nconst getUser = async (id) => {\n  let user = await redis.get(`user:${id}`);\n  if (!user) {\n    user = await db.findUser(id);\n    await redis.setex(`user:${id}`, 3600, JSON.stringify(user));\n  }\n  return JSON.parse(user);\n};\n```\n\n2. **Write-Through**\n3. **Write-Behind**\n\n## –î–ª—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤:\n- Shared Redis cluster\n- Consistent hashing\n- TTL policies',
            
            '–æ–±—ä—è—Å–Ω–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤': '–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ - –ø–æ–¥—Ö–æ–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –≥–¥–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –Ω–µ–±–æ–ª—å—à–∏—Ö –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:\n\n## –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:\n\n1. **–ù–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å** - –∫–∞–∂–¥—ã–π —Å–µ—Ä–≤–∏—Å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ\n2. **–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è** - –æ–¥–∏–Ω —Å–µ—Ä–≤–∏—Å = –æ–¥–Ω–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å\n3. **–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è** - —á–µ—Ä–µ–∑ API (REST, gRPC)\n4. **–î–∞–Ω–Ω—ã–µ** - —Å–≤–æ—è –ë–î –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞\n\n## –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n- –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å\n- –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ\n- –û—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å\n\n## –ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:\n- –°–ª–æ–∂–Ω–æ—Å—Ç—å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã\n- –°–µ—Ç–µ–≤—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏\n- Distributed tracing',
            
            '–∞ —á—Ç–æ –Ω–∞—Å—á–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏': '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞—Ö - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–π –∞—Å–ø–µ–∫—Ç:\n\n## –û—Å–Ω–æ–≤–Ω—ã–µ —É–≥—Ä–æ–∑—ã:\n1. **Man-in-the-middle** –∞—Ç–∞–∫–∏\n2. **Service spoofing**\n3. **Data breaches**\n4. **DDoS –∞—Ç–∞–∫–∏**\n\n## –†–µ—à–µ–Ω–∏—è:\n\n### Authentication & Authorization:\n```javascript\n// JWT —Ç–æ–∫–µ–Ω—ã\nconst token = jwt.sign({userId, role}, secret);\n\n// OAuth 2.0 / OpenID Connect\n// Service-to-service authentication\n```\n\n### Network Security:\n- **TLS/SSL** –¥–ª—è –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π\n- **Service mesh** (Istio, Linkerd)\n- **Network segmentation**\n- **API Gateway** —Å rate limiting\n\n### Monitoring:\n- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤\n- Audit trails\n- Anomaly detection',
            
            '—á—Ç–æ —Ç–∞–∫–æ–µ docker': 'Docker - –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π:\n\n## –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏:\n\n### –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã vs VM:\n- –õ–µ–≥—á–µ –∏ –±—ã—Å—Ç—Ä–µ–µ\n- –û–±—â–µ–µ —è–¥—Ä–æ –û–°\n- –ò–∑–æ–ª—è—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤\n\n### Dockerfile:\n```dockerfile\nFROM node:18-alpine\nWORKDIR /app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nEXPOSE 3000\nCMD ["npm", "start"]\n```\n\n### Docker Compose:\n```yaml\nversion: "3.8"\nservices:\n  app:\n    build: .\n    ports:\n      - "3000:3000"\n  redis:\n    image: redis:alpine\n```\n\n## –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n- –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–π\n- –ë—ã—Å—Ç—Ä–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ\n- –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å',
            
            'default': '–≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ —è –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞:\n\n- –í–æ–ø—Ä–æ—Å—ã –ø—Ä–æ REST API\n- –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã –∏ –∏—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å\n- Docker –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—é\n- –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Redis\n\n–î–ª—è –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ OpenAI API –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.'
        };
    }

    enable() {
        this.enabled = true;
        console.log('üé≠ Demo mode enabled - AI responses will be simulated');
    }

    disable() {
        this.enabled = false;
        console.log('Demo mode disabled');
    }

    isEnabled() {
        return this.enabled;
    }

    async generateDemoResponse(question, context = '') {
        if (!this.enabled) return null;

        // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ API
        await new Promise(resolve => setTimeout(resolve, 800 + Math.random() * 1200));

        const lowerQuestion = question.toLowerCase();
        
        // –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
        for (const [key, response] of Object.entries(this.demoResponses)) {
            if (key !== 'default' && lowerQuestion.includes(key)) {
                return response;
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ follow-up –≤–æ–ø—Ä–æ—Å–æ–≤
        if (lowerQuestion.includes('follow-up to:')) {
            return '–û—Ç–ª–∏—á–Ω–æ! –≠—Ç–æ —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å. –í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ —è –ø–æ–Ω–∏–º–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –º–æ–≥—É –¥–∞—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã.\n\n' + this.demoResponses.default;
        }

        return this.demoResponses.default;
    }

    getDemoQuestions() {
        return [
            '–ß—Ç–æ —Ç–∞–∫–æ–µ REST API?',
            '–ö–∞–∫ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Redis –¥–ª—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã?',
            '–û–±—ä—è—Å–Ω–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤',
            '–ê —á—Ç–æ –Ω–∞—Å—á–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏?',
            '–ß—Ç–æ —Ç–∞–∫–æ–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã?'
        ];
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.demoMode = new DemoMode();